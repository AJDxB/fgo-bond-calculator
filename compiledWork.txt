FGO Bond Calculator - Project Compiled Work Log
====================================================

Project History & Motivation
---------------------------
- **Origin:** Created to address the lack of reliable, up-to-date, and user-friendly FGO bond calculators, especially for global players who need accurate quest/bonus data and modern UI/UX.
- **Main Contributor:** AJDxB (ajdxb4787@gmail.com). See GitHub contributors for others.
- **Inspiration:** Community feedback, Atlas Academy data, and the need for a tool that supports new FGO features and bonuses.
- **Notable Forks/Inspiration:** Inspired by other FGO calculators, but built from scratch for maintainability and extensibility.

Detailed Component Descriptions
------------------------------
- **App.js**: Root React component. Handles theme switching (dark/light), server selection (NA/JP), layout, and renders the main calculator. Manages global state for theme and server choice, loads appropriate servant data file, and passes props to children. Updated to v0.3.4 with enhanced server toggle UI.
- **RunsCalculator.js**: Core logic for bond calculation with three modes (Quick List, Quest Mode, Custom Points). Handles user input (servant, bond points, quest, bonuses), performs calculations, and displays results. Contains logic for bonus stacking (additive/multiplicative), quest selection, and custom points mode. Manages state for all calculator fields. Enhanced in v0.3.4 with Quest Mode using FGO quest database.
- **RunsCalculator.css**: Styles for the calculator, including responsive design, bonus UI, and theme support. Contains custom classes for all calculator UI elements and adapts to mobile/desktop. Updated in v0.3.4 with color-coded calculator modes and improved React Select styling.
- **App.css**: Global styles for the app, including layout, typography, and theme variables. Enhanced in v0.3.4 with improved server toggle styling and Quest Mode component integration.
- **InfoTooltip.js**: New in v0.3.4. Reusable tooltip component for interactive help with click-based activation, mobile responsiveness, and accessibility features. Used throughout the app for contextual help.
- **InfoTooltip.css**: New in v0.3.4. Styles for the InfoTooltip component with responsive design, backdrop overlays, and theme compatibility.
- **QuestSelect.css**: New in v0.3.4. Modular styles for Quest Mode dropdown layout with mobile-responsive grid system and quest option formatting.
- **servants.json**: Local data file with all NA servant info (id, name, class, rarity, bond points, etc.), updated via GitHub Actions for speed and reliability.
- **servants_jp.json**: Local data file with all JP servant info, separate from NA data for server-specific differences.
- **quests.json**: New in v0.3.4. Comprehensive NA FGO quest database with 50,000+ quests including bond points, AP costs, war information, and quest types.
- **quests_jp.json**: New in v0.3.4. Comprehensive JP FGO quest database with similar structure to NA version.
- **fetch_servants.js / fetch_servants_jp.js**: Node scripts to fetch and update servant data from Atlas Academy for NA and JP servers respectively.
- **fetch_all_quests.js**: New in v0.3.4. Node script to fetch comprehensive quest database from Atlas Academy API for both servers. Creates quest data files with proper filtering and organization.
- **public/**: Static assets (images, icons, manifest, etc.) for deployment. Includes class icons, logos, and manifest files for PWA support. Now includes quest data files.
- **ServantClassImages/**: Contains all class icons, organized by rarity (Bronze/Silver/Gold) for use in the UI.

Data Flow & Architecture
------------------------
- **Data Fetching:** Servant and quest data is fetched from Atlas Academy and stored locally. Servant data in `public/servants.json` and `public/servants_jp.json`, quest data in `public/quests.json` and `public/quests_jp.json`. Data is updated via GitHub Actions and fetch scripts.
- **State Management:** Uses React hooks (useState, useEffect) for local state. No external state management library. Three calculator modes: Quick List (predefined), Quest Mode (real database), Custom Points (user input).
- **Calculation Logic:** All bond/quest/bonus calculations are performed in RunsCalculator.js. Bonus stacking is handled according to FGO rules (additive for most, multiplicative for Heroic Portrait/Frontline).
- **Theming:** Theme (dark/light) is managed via CSS variables and localStorage. User preference is persisted across sessions.
- **UI Rendering:** Responsive design using CSS clamp(), flexbox, and grid. All UI adapts to mobile and desktop. Color-coded calculator modes for better UX.
- **Component Architecture:** Modular design with reusable components (InfoTooltip, RunsCalculator, etc.) and separate CSS files for maintainability.

Detailed Data Flow Description
-----------------------------
- **Overview:**
    - The FGO Bond Calculator app processes data through several key stages: data fetching, local storage, state management, calculation, and UI rendering. This section provides a step-by-step description of how data flows from source to user interface.

1. **Data Fetching and Preparation:**
    - **Servant Data:**
        - The app now supports both NA and JP servers with separate data files:
            - `fetch_servants.js` retrieves NA server data and saves to `public/servants.json`
            - `fetch_servants_jp.js` retrieves JP server data and saves to `public/servants_jp.json`
        - Each script processes and filters data from the Atlas Academy API, keeping only the fields required by the app (e.g., id, name, class, rarity, bond points, traits).
        - The scripts are run both manually (by maintainers) and automatically (via GitHub Actions) to keep both NA and JP data up to date.
        - Users can switch between NA and JP data using a server selection toggle in the UI.    - **Quest Data:**
        - As of v0.3.4, quest data is now sourced from comprehensive database files:
            - `fetch_all_quests.js` retrieves complete quest database from Atlas Academy API
            - Creates `public/quests.json` (NA) and `public/quests_jp.json` (JP) with 50,000+ quests each
            - Quest data includes: questId, questName, questType, bond points per phase, warId, warName, warLongName, spotId, spotName, AP cost, consumeType, consumeItem, afterClear
            - Quest Mode filters for Free Quests with afterClear "repeatLast" or "resetInterval" only
            - War name mapping provides user-friendly display names for story chapters
        - Legacy quest data (hardcoded in RunsCalculator.js) is still used for Quick List mode for speed and reliability

2. **App Initialization:**
    - On app load, React components are initialized.
    - The main component (`App.js`) sets up global state (e.g., theme, server selection) and renders the calculator UI.
    - The `RunsCalculator.js` component loads servant data from appropriate server file and quest data based on selected calculator mode.
    - Quest Mode loads quest database asynchronously for improved performance.

3. **User Interaction and State Management:**
    - The user selects a servant, target bond level, and calculator mode (Quick List/Quest Mode/Custom Points).
    - Quest Mode allows searching through 50,000+ FGO quests with filtering by war/chapter.
    - The user enters any bond bonus percentages (CE, event, etc.) and toggles Heroic Portrait and Frontline bonuses.
    - InfoTooltip components provide contextual help for complex features.
    - All user inputs are managed via React `useState` hooks within `RunsCalculator.js`.
    - When any input changes, a `useEffect` hook triggers recalculation of results.

4. **Calculation Logic:**
    - The calculator determines the base bond points per run from the selected quest (Quick List/Quest Mode) or custom input.
    - Quest Mode dynamically calculates bond points based on selected quest's phase data.
    - It applies additive percentage bonuses, then flat bonuses (Heroic Portrait), then multiplicative bonuses (Frontline), following the documented order of operations.
    - Special handling for Bleached Earth quests with daily run limits.
    - The number of runs, total AP, bond per run, and estimated time are computed.
    - Results are stored in local component state with color-coded display based on calculator mode.

5. **UI Rendering:**
    - The calculator UI displays the current servant, quest, bonuses, and calculated results.
    - All results update in real time as the user changes inputs.
    - The UI uses CSS for responsive design and theming, adapting to mobile and desktop.

6. **Data Update Flow:**
    - When new servants are released or data needs updating, maintainers run fetch scripts or wait for the scheduled GitHub Action.
    - `fetch_servants.js` and `fetch_servants_jp.js` update servant data files.
    - `fetch_all_quests.js` updates quest database files with latest Atlas Academy data.
    - The updated files are committed and pushed to the repository, and deployed to GitHub Pages.
    - The app automatically serves the latest data on next load.

**Summary Table:**
| Stage                | Source/Trigger                | Data Location           | Consumed By           |
|----------------------|-------------------------------|------------------------|-----------------------|
| Fetch NA Servants    | fetch_servants.js, GitHub CI  | public/servants.json   | RunsCalculator.js     |
| Fetch JP Servants    | fetch_servants_jp.js, CI      | public/servants_jp.json| RunsCalculator.js     |
| Fetch NA Quests      | fetch_all_quests.js           | public/quests.json     | RunsCalculator.js     |
| Fetch JP Quests      | fetch_all_quests.js           | public/quests_jp.json  | RunsCalculator.js     |
| Quick List Quests    | Hardcoded in code             | RunsCalculator.js      | RunsCalculator.js     |
| User Input           | UI (React forms)              | React state            | RunsCalculator.js     |
| Calculation          | useEffect in RunsCalculator   | React state            | RunsCalculator.js     |
| UI Rendering         | React render cycle            | React state            | User (browser)        |
| Data Update/Deploy   | Maintainer/CI                 | public/ data files     | All users             |

- **Note:** All calculations and data processing are performed client-side. No user data is stored or transmitted.

Deployment & CI/CD
------------------
- **Deployment:** Uses `gh-pages` npm package to deploy the build to the `gh-pages` branch for GitHub Pages hosting. The homepage is set in package.json.
- **CI/CD:** GitHub Actions workflow runs twice daily to fetch and update servant data. Workflow files are in `.github/workflows/` (not shown above, but present in repo).
- **Common Issues:** Tag conflicts (e.g., v0.3.1 already exists) can block deployment. Solution: delete the remote tag before redeploying.
- **PowerShell Policy:** On Windows, set execution policy to RemoteSigned for npm scripts to work: `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser`.
- **Manual Data Update:** Run fetch_quests.js or fetch_servants.js to update data locally, then commit and push.

Naming Conventions & Architectural Patterns
------------------------------------------

### File Naming Conventions:
- **React Components:** PascalCase (e.g., `RunsCalculator.js`, `InfoTooltip.js`)
- **CSS Files:** Match component name (e.g., `RunsCalculator.css`, `InfoTooltip.css`)
- **Data Files:** Lowercase with underscores (e.g., `servants.json`, `quests_jp.json`)
- **Fetch Scripts:** Lowercase with underscores (e.g., `fetch_servants.js`, `fetch_all_quests.js`)
- **Test Scripts:** Lowercase with underscores in test_scripts folder (e.g., `test_quest_mode.js`)

### Code Organization Patterns:
- **Component Structure:** Each major component has its own JS and CSS file
- **Shared Styles:** Global variables in App.css, component-specific styles in separate files
- **State Management:** Local state with useState/useEffect, no global state library
- **Data Fetching:** Separate fetch scripts for each data type and server
- **File Headers:** Standardized JSDoc format with @author, @version, @created, @github

### Variable Naming:
- **React State:** camelCase descriptive names (e.g., `selectedServant`, `isCustomMode`)
- **CSS Classes:** kebab-case with component prefix (e.g., `.runs-calculator`, `.info-tooltip-wrapper`)
- **CSS Variables:** Double dash prefix (e.g., `--bg-color`, `--text-color`)
- **Constants:** UPPER_SNAKE_CASE (e.g., `QUEST_DATA`, `MAX_RETRIES`)

### Function Naming:
- **Event Handlers:** `handle` prefix (e.g., `handleBonusChange`, `handleQuestSelect`)
- **Utility Functions:** Descriptive verbs (e.g., `formatQuickListOption`, `isBleachedEarthQuest`)
- **API Functions:** Action-oriented (e.g., `fetchWithRetry`, `getQuestBondMapping`)

### Component Architecture:
- **Main App:** App.js handles global state (theme, server selection)
- **Calculator Logic:** RunsCalculator.js contains all calculation and form logic
- **Reusable UI:** InfoTooltip.js for help system, can be used anywhere
- **Styling:** Modular CSS with theme variables for consistent theming

### Data Structure Patterns:
- **Quest Data:** Consistent schema across NA/JP with questId, questName, bond, ap, warLongName
- **Servant Data:** Minimal required fields only for performance
- **Options Arrays:** Value/label objects for React Select compatibility
- **Grouped Options:** Label/options structure for categorized dropdowns

### Calculator Modes:
- **Quick List (Green):** Predefined popular quests for speed
- **Quest Mode (Blue):** FGO database with search/filter
- **Custom Points (Red):** User-defined values for flexibility

### Error Handling Patterns:
- **API Calls:** Retry logic with exponential backoff
- **Data Loading:** Graceful degradation with loading states
- **User Input:** Validation and sanitization before calculation
- **File Operations:** Try/catch with meaningful error messages

### Performance Patterns:
- **Data Loading:** Lazy loading for large quest database
- **React Rendering:** useMemo for expensive calculations
- **State Updates:** Batch related state changes
- **CSS:** Efficient selectors and minimal reflows

### Testing Patterns:
- **Unit Tests:** Component rendering and calculation logic
- **Integration Tests:** User workflow testing
- **Data Tests:** Validation of fetch script outputs
- **Manual Testing:** Cross-browser and mobile device testing

### Deployment Patterns:
- **Version Control:** Semantic versioning with git tags
- **CI/CD:** GitHub Actions for automated data updates
- **Static Hosting:** GitHub Pages for free hosting
- **Asset Management:** Public folder for static assets

Testing
-------
- **Test Files:** Located in `src/` (e.g., App.test.js, setupTests.js). Uses React Testing Library and Jest.
- **How to Run:** `npm test` runs all tests. Tests cover component rendering and basic logic.
- **Coverage:** Basic coverage for UI and calculation logic. No e2e tests. More tests recommended for edge cases and bonus stacking.

Known Issues & TODOs
--------------------
- **Deployment:** Tag conflicts with gh-pages. Always check for existing tags before deploying.
- **Data Updates:** Atlas Academy API changes may break fetch scripts. Monitor API changes.
- **UI/UX:** Some advanced FGO bonuses/events not yet supported. UI could be further improved for accessibility.
- **Testing:** Increase test coverage, especially for calculation edge cases.
- **Performance:** Large data files may slow down initial load on slow connections.
- **Feature Requests:** See GitHub Issues for open requests and suggestions.

User & Contributor Guidance
---------------------------
- **Request Features/Bugs:** Use GitHub Issues for all requests and bug reports.
- **Add New Quests/Servants:** Update the relevant data files (servants.json, quest data) and commit changes. Use fetch scripts for bulk updates.
- **Update Dependencies:** Use `npm update` and test thoroughly before deploying.
- **Pull Requests:** Fork, branch, and submit PRs with clear descriptions. Follow code style and include tests if possible.

External Integrations
---------------------
- **Atlas Academy API:** Used for all servant and quest data.
    - All endpoints, usage instructions, and data structure are documented at: https://api.atlasacademy.io/docs
    - Always consult the official documentation for the latest endpoints and query parameters.
    - Note: The app's fetch scripts are configured to use the recommended endpoints from the docs; update scripts as needed if the API changes.
- **GitHub Actions:** Automates data updates and can be extended for CI/CD.

UI/UX Design
------------
- **Design Rationale:** Focus on clarity, speed, and mobile-friendliness. Dropdowns for all selections, styled bonus multipliers, and clear result displays.
- **Accessibility:** Uses semantic HTML and ARIA labels where possible. Further improvements possible.
- **Adding UI Features:** Add new components to src/, update CSS, and test on both mobile and desktop.

Versioning & Tagging
--------------------
- **Tagging:** Tags are created for each release (v0.1.0, v0.2.0, etc.). Use `git tag vX.Y.Z` and `git push origin vX.Y.Z`.
- **Release Process:** Update version in package.json, App.js, and other relevant files. Update changelog in README.md. Tag and deploy.
- **Naming Conventions:** Semantic versioning (major.minor.patch).

Security & Privacy
------------------
- **User Data:** No user data is stored or transmitted. All calculations are client-side.
- **Data Updates:** Only maintainers can trigger GitHub Actions for data updates.
- **Dependencies:** Kept up to date to avoid vulnerabilities.

Changelog & Tags
----------------
### Version 0.3.4 - Quest Mode & Advanced UI Components
- **Quest Mode Implementation:** Added comprehensive FGO quest database integration using Atlas Academy API
  - New `fetch_all_quests.js` script to fetch complete quest database for both NA and JP servers
  - Created `public/quests.json` and `public/quests_jp.json` with 50,000+ quests each
  - Implemented quest filtering for Free Quests with repeatLast/resetInterval only
  - Added war name mapping and quest organization by story chapters and regions
  - Enhanced Quest Mode dropdown with AP/Bond display and mobile-responsive layout
- **InfoTooltip Component:** New reusable interactive tooltip system
  - Click-based tooltips with mobile responsiveness and backdrop overlay
  - Context-sensitive help for bond bonus calculations and quest selection
  - Proper accessibility with ARIA labels and keyboard navigation
  - Theme-compatible styling with CSS variable integration
- **Enhanced Server Toggle UI:** Improved visual design and user experience
  - Better styling integration with existing theme system
  - Clear visual feedback for active server selection
  - Consistent padding and hover states with other UI elements
- **Color-Coded Calculator Modes:** Visual distinction between calculator modes
  - Quick List: Green theme for predefined popular quests
  - Quest Mode: Blue theme for FGO quest database
  - Custom Points: Red theme for user-defined quest data
  - Improved user experience and mode identification
- **React Select Integration:** Upgraded dropdown system for Quest Mode
  - Better theme compatibility with CSS variables
  - Enhanced styling for quest options with AP and bond point display
  - Improved mobile responsiveness and accessibility
  - Fixed z-index and overlay issues from previous versions
- **Code Organization & Documentation:** Enhanced maintainability
  - Added comprehensive JSDoc headers to all new components
  - Standardized version headers across all files with @author, @created, @github
  - Created QuestSelect.css for modular quest dropdown styling
  - Improved component separation and reusability
- Tag: v0.3.4

### Version 0.3.3 - JP Server & UI Enhancements
- Fixed Calculations concerning Bleached Earth Quests being only 3 times per day
- Fixed Beast Ereshkigal class icon display to use proper "Class-Beast-Gold.png" 
- Added special handling for Beast class variants in icon rendering logic
- Added JP server support with separate servant data file (servants_jp.json)
- Added server selection toggle for switching between NA and JP data
- Enhanced dropdown menu UX with improved styling, scrolling, and visual consistency
- Fixed menu clipping issues and improved overall visual hierarchy
- Tag: v0.3.3

### Version 0.3.2- Major Quest Data, Bonus, and UI Overhaul
- Replaced and improved quest data and quest selection UI in Runs Calculator
- Added Heroic Portrait bonus and Frontline Bonus (multiplicative) with styled UI and multiplier dropdowns
- Various bugfixes and consistency improvements for quest, bonus, and calculation logic
- Tag: v0.3.2

### Version 0.3.1 - Local Data, Custom Points & UI Enhancements
- Added Custom Points mode to Runs Calculator for flexible farming calculations
- Switched to local servant data (`public/servants.json`) for faster and more reliable access
- Added GitHub Actions workflow for automated data updates
- Optimized data size by storing only required fields
- Tag: v0.3.1

### Version 0.3.0 - Runs to Max Calculator & Auto-calculations
- Added quest runs calculator with multiple quest types
- Implemented automatic calculations without manual button clicks
- Added bond bonus calculation for CEs and event bonuses
- Enhanced result display with quest efficiency metrics
- Added persistent dark/light mode preference using localStorage
- Improved code organization by separating CSS from JavaScript
- Added goal reached detection with enhanced visual feedback
- Tag: v0.3.0

### Version 0.2.2 - Responsive Design & Image Fixes
- Implemented fully responsive design using CSS clamp() functions
- Fixed class icon paths for GitHub Pages deployment
- Added proper mobile scaling while maintaining desktop appearance
- Fixed desktop centering issues with flexbox layout
- Enhanced image fallback system with emoji alternatives
- Tag: v0.2.2

### Version 0.2.1 - Deployment Improvements
- Updated site title and favicon
- Improved metadata for web deployment
- Tag: v0.2.1

### Version 0.2.0 - UI Overhaul and Enhanced Search
- Added dark/light mode toggle
- Implemented fuzzy search for servants
- Smart filtering of unplayable servants
- Enhanced UI with class icons and rarity stars
- Improved spacing and typography
- Tag: v0.2.0

### Version 0.1.0 - Initial Release
- Basic bond point calculation
- Servant selection dropdown
- Responsive design
- Tag: v0.1.0


Challenges & Solutions
---------------------
- **Quest Data Accuracy**: Ensured quest data is up-to-date and matches in-game values. Migrated to local data for reliability.
- **Bonus Calculation Logic**: Implemented complex bonus stacking (additive/multiplicative) for CEs, Heroic Portrait, and Frontline bonuses.
- **UI Consistency**: Refactored UI for clarity, added styled dropdowns, and improved mobile responsiveness.
- **Deployment Issues**: Faced issues with gh-pages tag conflicts (e.g., v0.3.1 tag already exists). Solution: Remove conflicting tags before deployment.
- **Class Icon Issues**: Fixed Beast Ereshkigal's incorrect class icon by:
  1. Identifying the incorrect class name normalization in App.js for "beastEresh"
  2. Adding logic to detect and handle beast-related class variations
  3. Implementing a consistent fallback to "Class-Beast-Gold.png" for all Beast classes
  4. Solution ensures proper icon display while maintaining extensibility for future Beast-class servants
- **Dropdown Menu UX**: Resolved dropdown menu clipping and visual consistency issues by:
  1. Implementing proper z-index management to prevent overlay issues
  2. Adding responsive height limits to prevent excessive scrolling
  3. Enhancing visual hierarchy with shadows, borders, and hover states
  4. Improving accessibility with better focus states and consistent spacing
  5. Solution provides better user experience across all screen sizes and themes
- **Quest Database Integration (v0.3.4)**: Challenges integrating 50,000+ quest database:
  1. Performance issues with large JSON files resolved through lazy loading and filtering
  2. Quest data normalization across different quest types and phases
  3. War name mapping for user-friendly display without overwhelming UI
  4. Memory optimization by filtering irrelevant quests before loading into UI
  5. Mobile responsiveness for complex quest dropdown layouts
- **InfoTooltip Mobile UX (v0.3.4)**: Mobile tooltip interaction challenges:
  1. Click-outside detection conflicts with touch events
  2. Tooltip positioning on small screens resolved with fixed positioning
  3. Backdrop overlay implementation for mobile modal-like experience
  4. Accessibility compliance with ARIA labels and keyboard navigation
- **React Select Theme Integration (v0.3.4)**: Dropdown styling challenges:
  1. CSS variable integration with third-party React Select component
  2. Dynamic theming support for both light and dark modes
  3. Custom option rendering for quest data with AP and bond information
  4. Mobile responsive grid layouts within dropdown options
- **Calculator Mode Distinction (v0.3.4)**: User experience improvements:
  1. Color-coded modes to help users distinguish between different calculators
  2. Visual feedback for active mode selection
  3. Consistent styling patterns across all three modes
  4. Performance optimization for mode switching without data loss
- **PowerShell Execution Policy**: On Windows, npm scripts may fail due to PowerShell policy. Solution: Set-ExecutionPolicy RemoteSigned for CurrentUser.
- **Automated Data Updates**: Set up GitHub Actions to fetch and update servant data twice daily, reducing manual maintenance.
- **Performance**: Optimized data size and loading for faster app startup.
- **Version Header Standardization (v0.3.4)**: Implemented consistent documentation:
  1. Standardized JSDoc headers across all files with @author, @version, @created, @github
  2. Version tracking for better maintenance and debugging
  3. Clear component ownership and creation dates for future development


Links & References
------------------
- Atlas Academy API: https://atlasacademy.io/
- GitHub Actions Docs: https://docs.github.com/en/actions
- React Docs: https://react.dev/
- gh-pages Docs: https://www.npmjs.com/package/gh-pages


How to Contribute
-----------------
- Fork the repo and create a new branch for your feature or fix
- Submit pull requests with clear descriptions
- Issues and suggestions are welcome via GitHub Issues


License
-------
MIT License (see LICENSE file)


For Next Agent
--------------
- **Current Version:** v0.3.4 with Quest Mode, InfoTooltip component, and enhanced UI
- **Project Structure:** React app with modular components and CSS, hosted on GitHub Pages
- **Key Components:** App.js (main), RunsCalculator.js (logic), InfoTooltip.js (help system)
- **Data Sources:** Atlas Academy API for servants and quests, local JSON files for performance
- **Calculator Modes:** Quick List (green), Quest Mode (blue), Custom Points (red)
- **Review this file for project history, structure, and known issues**
- **Check the README.md for up-to-date usage and changelog**
- **File Organization:** Follow naming conventions in "Naming Conventions & Architectural Patterns" section
- **Code Standards:** Use standardized JSDoc headers with @author, @version, @created, @github
- **Data Updates:** Use fetch_servants.js, fetch_servants_jp.js, fetch_all_quests.js for data updates
- **Deployment:** If deployment fails due to tag conflicts, delete the remote tag and try again
- **Windows Environment:** Ensure PowerShell execution policy allows npm scripts (Set-ExecutionPolicy RemoteSigned -Scope CurrentUser)
- **Component Development:** Each major component should have its own JS and CSS file with proper documentation
- **State Management:** Use React hooks (useState/useEffect), no external state management library
- **Styling:** Use CSS variables for theming, modular CSS files, responsive design with clamp()
- **Performance:** Large data files require lazy loading and filtering for optimal performance
- **Testing:** Run `npm test` for unit tests, manual testing on mobile and desktop required
- **All code and data is in the repo; see src/ for main components and public/ for assets**
- **For data updates, see fetch scripts in root directory**
- **For UI/logic, see RunsCalculator.js and App.js**
- **For CI/CD, see .github/workflows/ (if not present, check repo online)**
- **For advanced troubleshooting, check GitHub Issues and Pull Requests**
- **Quest Database:** Contains 50,000+ quests per server, filtered for Free Quests only in Quest Mode
- **InfoTooltip Usage:** Click-based tooltips with mobile responsiveness, use throughout app for help
- **Color Coding:** Green (Quick List), Blue (Quest Mode), Red (Custom Points) for visual distinction
- **Server Support:** Full NA/JP server support with separate data files and server toggle UI

**Quick Start for New Features:**
1. Create component file (PascalCase.js) and CSS file (PascalCase.css)
2. Add JSDoc header with author, version, created, github
3. Use CSS variables for theming compatibility
4. Test on both mobile and desktop
5. Update this file with changes and challenges faced
6. Update README.md changelog section
7. Update version numbers in package.json and App.js footer

**Common Issues:**
- Large quest database requires filtering and lazy loading
- React Select styling needs CSS variable integration for theming
- Mobile tooltips need special positioning and backdrop handling
- Git tag conflicts during deployment (delete remote tag first)
- Windows PowerShell execution policy may block npm scripts

This file is intended to be a comprehensive, non-code summary of the project for maintainers and future contributors.

fetch_servants.js Usage
----------------------
- **Purpose:** Downloads the latest FGO servant data from Atlas Academy and saves it locally as `public/servants.json` for use by the app.
- **How to Run:**
    - Open a terminal in the project root directory.
    - Run the script with Node.js:
      ```powershell
      node fetch_servants.js
      ```
- **What It Does:**
    - Fetches servant data from the Atlas Academy API (see https://api.atlasacademy.io/docs for the current endpoint).
    - Processes and filters the data to include only the fields required by the app (e.g., id, name, class, rarity, bond points, etc.).
    - Saves the processed data to `public/servants.json`.
- **Output:**
    - Overwrites `public/servants.json` with the latest servant data.
- **Configuration:**
    - No environment variables or arguments are required by default.
    - If the API endpoint changes, update the URL in `fetch_servants.js`.
- **Troubleshooting:**
    - If the script fails, check:
        - Your internet connection.
        - That the Atlas Academy API is online and the endpoint is correct.
        - That you have write permissions to the `public/` directory.
    - If the API structure changes, update the script to match the new data format.
- **When to Use:**
    - Run this script whenever you want to update the local servant data (e.g., after new servants are released or for regular maintenance).
    - The script is also run automatically by GitHub Actions for scheduled updates.

GitHub Actions Workflow Details
------------------------------
- **Workflow Files:** Located in `.github/workflows/` (e.g., `update-servants.yml`).
- **Purpose:** Automates the process of updating local servant data by running `fetch_servants.js` on a schedule or on demand.
- **Triggers:**
    - **Scheduled:** Runs automatically at set intervals (e.g., twice daily) to fetch the latest servant data.
    - **Manual:** Can be triggered manually from the GitHub Actions tab if immediate update is needed.
    - **On Push:** May also run on push to main or specific branches (if configured).
- **Steps Performed:**
    1. **Checkout:** Checks out the repository code.
    2. **Set Up Node.js:** Installs the required Node.js version (see `package.json` for version).
    3. **Install Dependencies:** Runs `npm ci` to install dependencies cleanly.
    4. **Run fetch_servants.js:** Executes the script to fetch and update `public/servants.json`.
    5. **Commit & Push:** If there are changes to `public/servants.json`, commits and pushes them back to the repository.
    6. **(Optional) Deploy:** May trigger deployment to GitHub Pages if configured.
- **Secrets & Permissions:**
    - Requires `GITHUB_TOKEN` or a personal access token with repo write permissions to push changes.
    - No external secrets are required for public Atlas Academy API access.
- **Logs & Troubleshooting:**
    - Workflow logs are available in the GitHub Actions tab for each run.
    - If the workflow fails, check logs for API errors, permission issues, or script errors.
- **Customization:**
    - To change the schedule, edit the `cron` expression in the workflow YAML file.
    - To add more steps (e.g., run tests, deploy), modify the workflow as needed.

Quest Data Structure & Implementation (v0.3.4)
--------------------------------------------
- **Quest Database Files:** `public/quests.json` (NA) and `public/quests_jp.json` (JP) contain comprehensive quest data
- **Data Source:** Fetched from Atlas Academy API using `fetch_all_quests.js` script
- **File Size:** 50,000+ quests per server, ~10-15MB each (requires lazy loading)
- **Quest Object Structure:**
  ```json
  {
    "questId": 93030101,
    "questName": "Lv80 敵影の英霊",
    "questType": "free",
    "bond": {
      "1": 815,
      "2": 815,
      "3": 815
    },
    "warId": 303,
    "warName": "Lostbelt No.3",
    "warLongName": "Lostbelt No.3\n人智統合真国 シン",
    "spotId": 30301,
    "spotName": "大都",
    "ap": 21,
    "consumeType": "ap",
    "consumeItem": [],
    "afterClear": "repeatLast"
  }
  ```
- **Field Descriptions:**
    - `questId`: Unique quest identifier from Atlas Academy
    - `questName`: Display name of the quest
    - `questType`: Type of quest (free, main, event, friendship, etc.)
    - `bond`: Object mapping phase numbers to bond point values
    - `warId`: Identifier for the war/chapter
    - `warName`: Short war name
    - `warLongName`: Full war name with subtitle
    - `spotId`: Location identifier within the war
    - `spotName`: Location display name
    - `ap`: AP cost to run the quest
    - `consumeType`: Resource type consumed (usually "ap")
    - `consumeItem`: Array of additional items consumed
    - `afterClear`: What happens after clearing (repeatLast, resetInterval, close)

- **Quest Mode Filtering:** Only includes quests where:
    - `questType === "free"` (Free Quests only)
    - `consumeType === "ap"` (AP-based quests)
    - `afterClear === "repeatLast" || afterClear === "resetInterval"` (Repeatable quests)

- **War Name Mapping:** User-friendly display names for better UX:
  ```javascript
  const warNameMap = {
    'Lostbelt No.1': 'LB1 - Anastasia',
    'Lostbelt No.2': 'LB2 - Götterdämmerung',
    'Lostbelt No.3': 'LB3 - SIN',
    // ... etc
  };
  ```

- **Performance Considerations:**
    - Quest data loaded asynchronously to avoid blocking UI
    - Filtered on load to reduce memory usage
    - Grouped by war for organized dropdown display
    - React Select virtualization for large option lists

Servant Data Structure Example
-----------------------------
- The local servant data is stored in `public/servants.json` as an array of servant objects.
- Each servant object contains only the fields required by the app for bond calculation and display.
- **Example servant object:**
  ```json
  {
    "id": 100100,
    "name": "Artoria Pendragon",
    "className": "Saber",
    "rarity": 5,
    "bondPoints": [500, 1500, 3000, 5000, 7000, 15000, 20000, 30000, 40000],
    "traits": ["King", "Arthur", "Dragon"]
  }
  ```
- **Field descriptions:**
    - `id`: Unique servant ID (number).
    - `name`: Servant's display name (string).
    - `className`: FGO class (e.g., "Saber", "Archer") (string).
    - `rarity`: Star rarity (number, 1-5).
    - `bondPoints`: Array of cumulative bond points required for each bond level (array of numbers).
    - `traits`: Array of trait strings (optional, used for filtering or bonus logic).
- **Note:** The actual fields may vary slightly depending on the current needs of the app. Check `fetch_servants.js` and `RunsCalculator.js` for the latest structure and usage.

Bonus Calculation Logic
----------------------
- **Overview:**
    - The app supports multiple types of bond point bonuses, including Craft Essences (CEs), Heroic Portrait, and Frontline Bonus.
    - Users can select and stack bonuses using the UI toggles and input fields in the Runs Calculator.
- **Types of Bonuses:**
    - **Craft Essence (CE) Bonus:** Additive percentage bonus. User enters the CE bond bonus percentage manually in the Bond Bonus (%) input field.
    - **Event/Other Additive Bonuses:** Any event or campaign bonuses are also added additively as percentages if present (entered manually).
    - **Heroic Portrait Bonus:** Flat additive bonus. If selected, adds +50 bond points per copy (multiplied by the number selected) after percentage-based additive bonuses, before multiplicative bonuses.
    - **Frontline Bonus:** Multiplicative bonus. If selected, multiplies the total bond points after all additive bonuses (including Heroic Portrait).
- **Order of Operations:**
    1. **Base bond points** are determined by the selected quest.
    2. **Additive percentage bonuses** (CE, event, etc.) are summed and applied to the base bond points.
    3. **Flat bonuses** (Heroic Portrait: +50 per copy) are added to the result from step 2.
    4. **Multiplicative bonuses** (Frontline, etc.) are applied to the sum from step 3.
    5. The final bond points per run are rounded/floored as per FGO rules (if applicable).
- **UI Implementation:**
    - Users enter CE and event bonuses as a percentage in the Bond Bonus (%) input field, and select Heroic Portrait and Frontline bonuses using toggles and dropdowns.
    - The UI displays the total bonus applied and the resulting bond points per run.
    - Bonus multipliers and their effects are visually indicated for clarity.
- **Edge Cases:**
    - If multiple multiplicative bonuses are selected, they are multiplied together (e.g., 1.1 × 1.2 = 1.32x total multiplier).
    - If no bonuses are selected, only the base bond points are used.
    - The app ensures that bonuses are not double-counted and that only valid combinations are allowed.
- **Maintenance:**
    - Bonus values and stacking logic are defined in `RunsCalculator.js`.
    - If FGO introduces new bonus types or changes stacking rules, update the logic in `RunsCalculator.js` and the UI as needed.
