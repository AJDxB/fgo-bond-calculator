FGO Bond Calculator Cleanup Plan v3.0
=====================================

## üéâ PHASE 1: COMPONENT EXTRACTION - COMPLETED! üéâ

### ‚úÖ COMPLETED COMPONENTS:
1. **ServantSelector** - Servant search, filtering, class icons ‚úÖ DONE
2. **BondLevelSelector** - Current/target bond level inputs ‚úÖ DONE  
3. **BondProgressDisplay** - Bond points, percentages, visual progress ‚úÖ DONE
4. **ServerToggle** - NA/JP server selection ‚úÖ DONE
5. **ThemeToggle** - Dark/light mode toggle ‚úÖ DONE
6. **Header** - Logo, title, version display ‚úÖ DONE

### üìä CURRENT STATUS (PHASE 1 COMPLETE):
- **App.js**: Reduced from 580 lines to 221 lines (62% reduction)
- **Files created**: 24 new files (6 components √ó 4 files each)
- **Functionality**: 100% preserved (zero visual/behavioral changes)
- **CSS**: Fully modularized with theme system intact
- **Tests**: All passing with comprehensive coverage
- **Git**: Clean history with professional commits
- **Development server**: Running successfully
- **All commits**: Pushed to clean-up branch

### üî• PROVEN WORKFLOW (WHAT WORKED PERFECTLY):
1. **Identify target component** (JSX + CSS together)
2. **Create component directory** with 4 files:
   - Component.jsx (main component)
   - Component.module.css (CSS module)
   - index.js (export)
   - Component.test.js (tests)
3. **Extract JSX** from App.js
4. **Extract CSS** from App.css ‚Üí CSS module
5. **Update App.js** to use new component
6. **Verify no errors** with get_errors()
7. **Git commit + push** with professional message
8. **Update documentation**

---

## üìã TARGET STRUCTURE (PLANNED)

### CURRENT STRUCTURE ISSUES:
- Multiple CSS files in src/ root (App.css, InfoTooltip.css, QuestSelect.css, RunsCalculator.css)
- Assets scattered (fgo_calc_logo.png, saintquartz.png in src/)
- ServantClassImages duplicated in src/ and public/
- No organized component structure
- Missing separation of concerns

### TARGET STRUCTURE:
```
/src
  /components
    /core
      ServantSelector/ ‚úÖ DONE
      BondLevelSelector/ ‚úÖ DONE
      BondProgressDisplay/ ‚úÖ DONE
      ServerToggle/ ‚úÖ DONE
      ThemeToggle/ ‚úÖ DONE
      Header/ ‚úÖ DONE
    /calculators
      RunsCalculator/
        RunsCalculator.jsx (migrate from src/RunsCalculator.js)
        QuestModePanel.jsx (extract from RunsCalculator)
        CustomPointsPanel.jsx (extract from RunsCalculator)
        QuickListPanel.jsx (extract from RunsCalculator)
        QuestSelect.jsx (extract with QuestSelect.css)
        RunsCalculator.module.css (migrate from src/RunsCalculator.css)
        QuestSelect.module.css (migrate from src/QuestSelect.css)
        RunsCalculator.test.js
        index.js
    /ui
      InfoTooltip/
        InfoTooltip.jsx (migrate from src/InfoTooltip.js)
        InfoTooltip.module.css (migrate from src/InfoTooltip.css)
        InfoTooltip.test.js
        index.js
    /layout
      Layout/
        Layout.jsx (extract container logic)
        Layout.module.css
        Layout.test.js
        index.js
  /hooks
    useServantData.js (extract servant loading logic)
    useBondCalculations.js (extract bond calculation logic)
    useQuestData.js (extract quest data logic)
    useTheme.js (extract theme management)
    useLocalStorage.js (extract localStorage utilities)
    useDebounce.js (for search optimization)
  /utils
    bondCalculations.js (extract from components)
    servantUtils.js (extract filtering/search logic)
    questUtils.js (extract quest processing)
    formatters.js (number formatting, etc.)
    constants.js (magic numbers, default values)
    apiClient.js (axios wrapper with error handling)
    classUtils.js (capitalizeClass and related functions)
  /services
    servantService.js (servant data fetching/caching)
    questService.js (quest data fetching/caching)
    dataTransformers.js (API response processing)
  /assets
    /images
      fgo_calc_logo.png (move from src/)
      saintquartz.png (move from src/)
    /icons
      /class-icons (consolidate from src/ServantClassImages)
  /styles
    globals.css (global styles, reset, base typography)
    variables.css (CSS custom properties for theming)
    themes.css (dark/light mode theme definitions)
    components.css (shared component utilities)
  App.js (simplified main component)
  App.css (reduced to app-level layout only)
  index.js (unchanged)
  index.css (migrate to /styles/globals.css)
```

---

## üöÄ PHASE 2: ADVANCED REFACTORING (NEXT PRIORITIES)

### IMMEDIATE NEXT STEPS:
1. **RunsCalculator Component Breakdown**
   - Extract QuestModePanel subcomponent
   - Extract CustomPointsPanel subcomponent  
   - Extract QuickListPanel subcomponent
   - Extract QuestSelect.jsx (with QuestSelect.css)
   - Migrate RunsCalculator.css to CSS module

2. **InfoTooltip Migration**
   - Move InfoTooltip.js to /components/ui/InfoTooltip/
   - Convert InfoTooltip.css to CSS module
   - Add proper tests

3. **Asset Organization**
   - Move images from src/ to /assets/images/
   - Consolidate class icons
   - Update import paths

### CSS SYSTEM MIGRATION (CRITICAL):
**Current CSS Issues:**
- App.css contains theme variables, component styles, and react-select customization
- Component-specific CSS scattered in root
- Missing theme integration in some components

**CSS Migration Strategy:**
- **Phase 2A**: Extract theme system to /styles/variables.css and themes.css
- **Phase 2B**: Migrate component CSS to CSS modules with theme integration
- **Phase 2C**: Clean up App.css to only app-level layout

**Critical CSS Files to Migrate:**
- App.css (600+ lines) ‚Üí Multiple organized files
- InfoTooltip.css ‚Üí InfoTooltip.module.css
- QuestSelect.css ‚Üí QuestSelect.module.css  
- RunsCalculator.css ‚Üí RunsCalculator.module.css
- index.css ‚Üí /styles/globals.css

---

## üîß PHASE 3: TECHNICAL IMPROVEMENTS

### Modern React Patterns & Performance:
- CSS Modules for scoped styling (in progress)
- React.memo for expensive components (ServantSelector, QuestSelect)
- useMemo for expensive calculations (bond calculations, servant filtering)
- useCallback for event handlers to prevent re-renders
- Custom hooks for business logic separation
- Error boundaries for each major section
- Suspense boundaries for data loading
- Code splitting with React.lazy()

### Data Management & API Layer:
**Current Issues:**
- Direct axios calls in components
- No error handling for API failures
- No loading states
- No data caching
- Large JSON files loaded on startup

**Improvements:**
- Create dedicated API service layer
- Implement React Query for data fetching, caching, and sync
- Add proper loading states and error boundaries
- Implement virtual scrolling for large servant lists
- Add data prefetching for better UX
- Consider IndexedDB for offline quest data

### State Management:
**Current**: useState scattered across components
**Target**: 
- Context API for global state (theme, server, selected servant)
- Local state for component-specific data
- Custom hooks for complex state logic
- Consider Zustand for more complex state if needed

---

## üéØ PHASE 4: QUALITY & DEVELOPER EXPERIENCE

### Testing Strategy:
**Unit Tests:**
- Bond calculation utilities
- Servant filtering logic
- Data transformation functions
- Custom hooks
- Component rendering

**Integration Tests:**
- Servant selection flow
- Calculator mode switching
- Theme/server switching
- Error handling flows

**E2E Tests (Playwright/Cypress):**
- Complete bond calculation workflow
- Quest mode functionality
- Responsive design on different devices

### Code Quality & Standards:
**Linting & Formatting:**
- ESLint with React/hooks rules
- Prettier for consistent formatting
- Husky for pre-commit hooks
- lint-staged for staged file linting

**Code Standards:**
- Consistent naming conventions
- Component composition patterns
- Props validation with PropTypes
- JSDoc documentation
- Function complexity limits

### Accessibility (WCAG 2.1 AA):
**Current Issues:**
- Missing ARIA labels on interactive elements
- Poor keyboard navigation
- Color contrast issues in themes
- No screen reader announcements

**Improvements:**
- Add semantic HTML structure
- Implement proper focus management
- Add ARIA live regions for dynamic content
- Test with screen readers
- Add keyboard shortcuts for power users
- Ensure proper color contrast ratios

---

## üìÖ IMPLEMENTATION ROADMAP

### WEEK 1-2: Phase 2 - Advanced Refactoring
- üî• **PRIORITY**: CSS system migration and theme extraction
- Break down RunsCalculator into subcomponents
- Migrate InfoTooltip to component structure
- Asset organization and consolidation
- Extract utility functions and custom hooks

### WEEK 3: Phase 3 - Technical Improvements
- Implement remaining custom hooks
- Add error boundaries and loading states
- Setup React Query for data management
- Performance optimizations (memoization, code splitting)

### WEEK 4: Phase 4 - Quality Improvements
- Complete testing suite for all components
- Add linting/formatting rules
- Accessibility improvements (ARIA, keyboard navigation)
- Documentation and code review

### FUTURE: Advanced Features
- PWA implementation
- TypeScript migration
- Advanced calculator features

---

## ‚ö†Ô∏è CRITICAL SUCCESS FACTORS

### Must Maintain:
1. **Backward compatibility** during refactoring
2. **Current functionality** working at all times
3. **Incremental changes** with testing
4. **Performance** impact monitoring
5. **Theme system** across all components
6. **Mobile responsiveness**
7. **Existing keyboard shortcuts** and interactions
8. **Current calculation accuracy**
9. **Visual hierarchy** and color schemes
10. **Data integrity** after component extraction

### Breaking Changes to Avoid:
- Don't change existing component APIs abruptly
- Maintain current CSS class names during transition
- Keep existing data formats compatible
- Don't break localStorage key names without migration
- Don't change URL structure (if any)
- Preserve existing error handling behavior

---

## üîç ADDITIONAL TECHNICAL CONSIDERATIONS

### Data Validation & Error Handling:
**Current Gaps:**
- No validation for servant data structure
- Missing error boundaries for component failures
- No fallback UI for missing data files
- No handling of malformed JSON responses

**Additions Needed:**
- PropTypes or TypeScript for component props
- Data schema validation for servant/quest JSON
- Graceful degradation for missing features
- User-friendly error messages
- Retry mechanisms for failed requests

### Performance Considerations:
**Current Gaps:**
- Large servant data loaded synchronously
- No virtualization for long lists
- Missing memoization for expensive calculations
- No lazy loading of components

**Additions Needed:**
- React.memo for expensive components
- useMemo for calculation results
- useCallback for event handlers
- Virtual scrolling for servant/quest lists
- Code splitting with React.lazy()

### Browser Compatibility & Polyfills:
**Current Gaps:**
- CSS custom properties may need fallbacks
- Modern JavaScript features (optional chaining, nullish coalescing)
- CSS Grid and Flexbox fallbacks

**Additions Needed:**
- Browserslist configuration
- PostCSS for CSS preprocessing
- Babel polyfills for older browsers
- Feature detection and graceful degradation

### Development Workflow:
**Current Gaps:**
- No pre-commit hooks
- Missing code formatting standards
- No automated testing in CI
- No bundle size monitoring

**Additions Needed:**
- Husky + lint-staged for pre-commit checks
- Prettier configuration
- GitHub Actions for testing
- Bundle analyzer integration
- Automated accessibility testing

### Data Migration & Versioning:
**Current Gaps:**
- No strategy for handling servant data updates
- Missing data versioning
- No migration path for localStorage changes
- No handling of breaking API changes

**Additions Needed:**
- Data version checks
- Migration scripts for localStorage
- Fallback for old data formats
- API versioning strategy

---

**Phase 1 component extraction was a complete success! The proven workflow should be applied to Phase 2 components.**
